// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your database provider, e.g., sqlite, mysql, etc.
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OWNER
  ADMIN
}

// prisma/schema.prisma
model User {
  id       String    @id @default(cuid()) // Unique identifier for the user
  name     String
  email    String    @unique // User's email
  username String    @unique
  image    String? // User's profile picture from GitHub
  role     Role      @default(USER)
  accounts Account[] // Associated accounts (GitHub)
  sessions Session[] // Associated sessions
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional: GitHub refresh token (if needed)
  access_token      String? // GitHub access token
  expires_at        Int? // Token expiration time
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
